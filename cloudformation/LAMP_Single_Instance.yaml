AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP stack using
  a single EC2 instance and a local MySQL database for storage. This template demonstrates
  using the AWS CloudFormation and AWS Systems Manger to install the packages and files
  necessary to deploy the Apache web server, PHP and MySQL at instance launch time.
  **WARNING** This template creates an Amazon EC2 instance. You will be billed for
  the AWS resources used if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - a1.medium
      - a1.large
      - a1.xlarge
      - a1.2xlarge
      - a1.4xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - m5n.16xlarge
      - m5n.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - c5.12xlarge
      - c5.16xlarge
      - c5.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.8xlarge
      - c5n.12xlarge
      - c5n.16xlarge
      - c5n.24xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AutomationTagKey:
    Type: String
    Default: "Name"
  AutomationTagValue:
    Type: String
    Default: "Automation-LAMPStack-AL2"
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
Resources:
  DBPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password for MySQL database access
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUser}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  DBRootPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Root password for MySQL
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  LampStackInstall:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: 
        mainSteps: 
          - name: outputPublicDNS
            action: aws:runCommand
            inputs: 
              Comment: "Outputting public DNS address of EC2 instance"
              DocumentName: AWS-RunShellScript
              Targets:
              - Key: !Sub 'tag:${AutomationTagKey}'
                Values:
                - !Ref AutomationTagValue
              Parameters: 
                commands: 
                  - curl -fsq http://169.254.169.254/latest/meta-data/public-hostname
                executionTimeout: "3600"
                workingDirectory: ""
            description: |-
              **Output the public DNS address for the launched EC2 instance**
        
              This step outputs the public DNS address for the EC2 instance launched. You can use this public DNS address to test your instance in subsequent steps. Select the radio button next to the Step execution ID to display the public DNS address of the EC2 instance.
          - name: installLAMPServer
            action: aws:runCommand
            onFailure: step:deleteStackOnError
            inputs: 
              Comment: "Installing LAMP Server"
              DocumentName: AWS-RunShellScript
              Targets:
              - Key: !Sub 'tag:${AutomationTagKey}'
                Values:
                - !Ref AutomationTagValue
              Parameters: 
                commands:
                  - sudo yum update -y
                  - sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
                  - sudo yum install -y httpd mariadb-server
                  - sudo systemctl start httpd
                  - sudo systemctl enable httpd
                  - sudo systemctl is-enabled httpd
                  - curl -fsq http://169.254.169.254/latest/meta-data/public-hostname
                executionTimeout: "3600"
                workingDirectory: ""
            description: |-
              **Prepare the LAMP Server**
        
              This step starts with installing the latest security updates and bug fixes. After updates have been installed, the Apache web server (```httd24```), MySQL (```mysql56-server```), and PHP software packages (```php70``` and ```php70-mysqlnd```) are installed on the instance. The Apache web server service is then configured to start automatically.
              
              Once this step is complete, you can test your web server by entering the public DNS address (or the public IP address of your instance) in a web browser. You should see the Apache test page.
          - name: setFilePermissions
            action: aws:runCommand
            onFailure: step:deleteStackOnError
            inputs: 
              Comment: "Setting file permissions"
              DocumentName: AWS-RunShellScript
              Targets:
              - Key: !Sub 'tag:${AutomationTagKey}'
                Values:
                - !Ref AutomationTagValue
              Parameters: 
                commands: 
                  - "sudo usermod -a -G apache ec2-user"
                  - "groups ec2-user"
                  - "sudo chown -R ec2-user:apache /var/www"
                  - "sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \\;"
                  - "find /var/www -type f -exec sudo chmod 0664 {} \\;"
                executionTimeout: "3600"
            description: |-
              **Setting File Permissions**
        
              This step adds your user (```ec2-user```) to the ```apache``` group. After this, the group ownership of ```/var/www``` and its contents is changed to the ```apache``` group. The Automation then adds group write permissions and sets the group ID on future subdirectories for the directory ```/var/www``` and its subdirectories.
          - name: testLAMPServer
            action: aws:runCommand
            inputs: 
              Comment: "Testing LAMP server with PHP endpoint"
              DocumentName: AWS-RunShellScript
              Targets:
              - Key: !Sub 'tag:${AutomationTagKey}'
                Values:
                - !Ref AutomationTagValue
              Parameters: 
                commands: 
                  - "echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php"
                executionTimeout: "3600"
            description: |-
              **Testing the LAMP server using the PHP Endpoint**
        
              This step creates a PHP file, ```phpinfo.php```, in the Apache document root. Following this, you can navigate to the PHP information page by entering the public DNS address (or the public IP address of your instance) in a web browser. You should see the PHP information page.
          - name: removePHP
            action: aws:runCommand
            inputs: 
              Comment: "Removing PHP file from previous step"
              DocumentName: AWS-RunShellScript
              Targets:
              - Key: !Sub 'tag:${AutomationTagKey}'
                Values:
                - !Ref AutomationTagValue
              Parameters: 
                commands: 
                  - rm /var/www/html/phpinfo.php
                executionTimeout: "3600"
            description: |-
              **Removing the PHP Information page**
        
              This step removes the ```phpinfo.php``` file created in the previous step. Although this can be useful information, it should not be broadcast to the internet for security reasons.
          - name: secureDatabase
            action: aws:runCommand
            inputs: 
              Comment: "Securing MySQL DB"
              DocumentName: AWS-RunShellScript
              Targets:
              - Key: !Sub 'tag:${AutomationTagKey}'
                Values:
                - !Ref AutomationTagValue
              Parameters: 
                commands: 
                  - sudo systemctl start mariadb
                  - root={{resolve:secretsmanager:DBRootPassword:SecretString:password}}
                  - mysql --user=root <<_EOF_
                  - UPDATE mysql.user SET Password=PASSWORD('$root') WHERE User='root';
                  - DELETE FROM mysql.user WHERE User='';
                  - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
                  - DROP DATABASE IF EXISTS test;
                  - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
                  - FLUSH PRIVILEGES;
                  - _EOF_
                  - sudo systemctl enable mariadb
                executionTimeout: "3600"
                workingDirectory: ""
            description: |-
              **Securing the MySQL Database**
        
              This step automates the process of setting a root password and removing the insecure features from the MySQL installation. First, the MySQL database is started. Next, a random password is generated for the root user and set within MySQL; this password is stored within AWS Systems Manager Parameter Store. Additionally, the following configuration changes are made to MySQL database installation.
              
              * Removing anonymous user accounts
              * Disabling remote root login
              * Removing the test database
              
              Lastly, the MySQL database is configured to start at every boot.
          - name: installphpMyAdmin
            action: aws:runCommand
            onFailure: step:deleteStackOnError
            isEnd: true
            inputs: 
              Comment: "Installing phpMyAdmin"
              DocumentName: AWS-RunShellScript
              Targets:
              - Key: !Sub 'tag:${AutomationTagKey}'
                Values:
                - !Ref AutomationTagValue
              Parameters: 
                commands: 
                  - sudo yum install php-mbstring -y
                  - sudo systemctl restart httpd
                  - sudo systemctl restart php-fpm
                  - cd /var/www/html
                  - wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz
                  - mkdir phpMyAdmin && tar -xvzf phpMyAdmin-latest-all-languages.tar.gz -C phpMyAdmin --strip-components 1
                  - rm phpMyAdmin-latest-all-languages.tar.gz
                  - sudo systemctl start mariadb
                executionTimeout: "3600"
            description: |-
              **Install phpMyAdmin**
        
              This step installs phpMyAdmin on your instance, which is a web-based database management tool that you can use to view and edit the MySQL databases. After this step completes, you can access phpMyAdmin by entering the public DNS address (or the public IP address of your instance) followed by a forward slash and the name ```phpMyAdmin``` in a web browser. For example:
              
              >http://my.public.dns.amazonaws.com/phpMyAdmin
              
              You should see the phpMyAdmin login page. To login, enter ```root``` as the user name and the value of the Parameter Store parameter [```/Tutorials/Passwords/AL2/MySQL/root```](https://console.aws.amazon.com/systems-manager/parameters/%252FTutorials%252FPasswords%252FMySQL%252Froot/description).
              
              **Important**
        
              We do not recommend using phpMyAdmin to access a LAMP server unless you have enabled SSL/TLS in Apache; otherwise, your database administrator password and other data are transmitted insecurely across the internet. For security recommendations from the developers, see [Securing your phpMyAdmin installation](https://docs.phpmyadmin.net/en/latest/setup.html#securing-your-phpmyadmin-installation).
            isEnd: true
  SSMInstanceRole: 
    Type : AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: 
                  - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                  - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
                Effect: Allow
          PolicyName: ssm-custom-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${SSMAssocLogs}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${SSMAssocLogs}'
                Effect: Allow
          PolicyName: s3-instance-bucket-policy
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
            - "ssm.amazonaws.com"
          Action: "sts:AssumeRole"
  SSMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
      - !Ref SSMInstanceRole        
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref 'InstanceType'
      SecurityGroups:
        - !Ref 'WebServerSecurityGroup'
      KeyName: !Ref 'KeyName'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
  NginxAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref ssmnginxinstall
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref SSMAssocLogs
          OutputS3KeyPrefix: 'logs/'
      Parameters:
        InstanceId:
          - !Ref EC2Instance
        AutomationAssumeRole:
          - 'arn:aws:iam::024357338510:role/EC2-Admin'        
Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Join
      - ''
      - - http://
        - !GetAtt 'WebServerInstance.PublicDnsName'
