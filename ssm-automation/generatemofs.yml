---
schemaVersion: "0.3"
description: "Generate MOFs and upload to S3"
# Role that is utilized to perform the steps within the Automation Document.
assumeRole: "{{AutomationAssumeRole}}"
# Gathering parameters needed to configure DCs in the Quick Start
parameters:
  MOFBucket: 
    default: ""
    description: "Name of S3 Bucket to Store MOF Files"
    type: "String"
  AMI: 
    default: "/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base"
    description: "SSM AMI String for CFN"
    type: "String"
  AutomationAssumeRole:
    type: "String"
    description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
    default: ""
mainSteps:
- name: createStack
  action: aws:createStack
  inputs:
    StackName: "AuthorMof"
    Capabilities: [ "CAPABILITY_IAM" ]
    TemplateBody: |
      Description: "Deploy MOF Authoring Server"
      Parameters:
        LatestAmiId:
          Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
          Default: "{{AMI}}"
        MOFBucket:
          Default: "{{MOFBucket}}"
          Description: S3 bucket name for the MOF files.
          Type: String 
      Resources:
        SecurityGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupDescription: AuthorMof
        AuthorMofRole: 
          Type : AWS::IAM::Role
          Properties:
            Policies:
              - PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Action:
                        - s3:GetObject
                        - s3:PutObject
                      Resource: !Sub 'arn:${AWS::Partition}:s3:::${MOFBucket}/*'
                      Effect: Allow
                PolicyName: s3-policy
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                  - "ec2.amazonaws.com"
                  - "ssm.amazonaws.com"
                Action: "sts:AssumeRole"
            ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        IamInstanceProfile:
          Type: "AWS::IAM::InstanceProfile"
          Properties:
            Roles:
            - !Ref AuthorMofRole
        AuthorMofInstance:
          Type: "AWS::EC2::Instance"
          Properties:
            ImageId: !Ref LatestAmiId
            InstanceType: "t3.large"
            IamInstanceProfile: !Ref IamInstanceProfile
            Tags:
            - Key: "Name"
              Value: "AuthorMof"
- name: "getInstanceId"
  action: aws:executeAwsApi
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: [ "AuthorMof" ]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceId
    Selector: "$.Reservations[0].Instances[0].InstanceId"
    Type: "String"
- name: "InstallDSCModules"
  action: aws:runCommand
  onFailure: "step:deleteStack"
  inputs:
    DocumentName: AWS-RunPowerShellScript
    InstanceIds: 
      - "{{getInstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      commands: 
        - |  
           Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
           Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
           Install-Module -Name ComputerManagementDsc
- name: "DomainJoinMof"
  action: "aws:runCommand"
  onFailure: "step:deleteStack"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
    - "{{getInstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://{{MOFBucket}}.s3.amazonaws.com/DomainJoin.ps1"}'
      commandLine: "./DomainJoin.ps1"
- name: "WebSiteBuildMof"
  action: "aws:runCommand"
  onFailure: "step:deleteStack"
  inputs:
    DocumentName: "AWS-RunRemoteScript"
    InstanceIds:
    - "{{getInstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      sourceType: "S3"
      sourceInfo: '{"path": "https://{{MOFBucket}}.s3.amazonaws.com/WebSiteBuild.ps1"}'
      commandLine: "./WebSiteBuild.ps1" 
- name: "CopyMofs"
  action: aws:runCommand
  onFailure: "step:deleteStack"
  inputs:
    DocumentName: AWS-RunPowerShellScript
    InstanceIds: 
      - "{{getInstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      commands: 
        - |  
           Write-S3Object -BucketName "{{MOFBucket}}" -Key 'buildwebsite.mof' -File C:\MofFiles\WebsiteTest\localhost.mof
           Write-S3Object -BucketName "{{MOFBucket}}" -Key 'domainjoin.mof' -File C:\MofFiles\DomainJoin\localhost.mof
- name: deleteStack
  action: aws:deleteStack
  isEnd: true
  onFailure: Continue
  inputs:
    StackName: "AuthorMof"