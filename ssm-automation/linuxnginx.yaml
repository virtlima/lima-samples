---
schemaVersion: "0.3"
description: "Create a .NET Framework Container for CodeBuild"
assumeRole: "{{AutomationAssumeRole}}"
parameters:
  AMI: 
    default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    description: "SSM Parameter for AMI"
    type: "String"
  AutomationAssumeRole:
    default: ""
    description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
    type: "String" 
mainSteps:
- name: createStack
  action: aws:createStack
  inputs:
    StackName: "EC2Linux-{{automation:EXECUTION_ID}}"
    Capabilities: [ "CAPABILITY_IAM" ]
    TemplateBody: |
      Description: "Deploy Single EC2 Linux Instance"
      Parameters:
        LatestAmiId:
          Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
          Default: "{{AMI}}"
      Resources:
        LabBucket:
           Type: AWS::S3::Bucket
           DeletionPolicy: Delete
        SecurityGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupDescription: DotNetContainer
        SSMInstanceRole: 
          Type : AWS::IAM::Role
          Properties:
            Policies:
              - PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Action:
                        - s3:GetObject
                      Resource: 
                        - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                        - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                        - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                        - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                        - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                        - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
                      Effect: Allow
                PolicyName: ssm-custom-s3-policy
              - PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Action:
                        - s3:GetObject
                        - s3:PutObject
                        - s3:PutObjectAcl
                        - s3:ListBucket
                      Resource: 
                        - !Sub 'arn:${AWS::Partition}:s3:::${LabBucket}/*'
                        - !Sub 'arn:${AWS::Partition}:s3:::${LabBucket}'
                      Effect: Allow
                PolicyName: s3-instance-bucket-policy
            Path: /
            ManagedPolicyArns:
              - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
              - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                  - "ec2.amazonaws.com"
                  - "ssm.amazonaws.com"
                Action: "sts:AssumeRole"
        SSMInstanceProfile:
          Type: "AWS::IAM::InstanceProfile"
          Properties:
            Roles:
            - !Ref SSMInstanceRole
        EC2Instance:
          Type: "AWS::EC2::Instance"
          Properties:
            ImageId: !Ref LatestAmiId
            InstanceType: "t3.small"
            IamInstanceProfile: !Ref SSMInstanceProfile
            Tags:
            - Key: "Name"
              Value: "MGT416-EC2"
- name: "getInstanceId"
  action: aws:executeAwsApi
  inputs:
    Service: ec2
    Api: DescribeInstances
    Filters:  
    - Name: "tag:Name"
      Values: [ "MGT416-EC2" ]
    - Name: "tag:aws:cloudformation:stack-name"
      Values: ["EC2Linux-{{automation:EXECUTION_ID}}"]
    - Name: "instance-state-name"
      Values: [ "running" ]
  outputs:
  - Name: InstanceId
    Selector: "$.Reservations..Instances..InstanceId"
    Type: "StringList"
- name: "YumUpdate"
  action: "aws:runCommand"
  inputs:
    DocumentName: "AWS-RunShellScript"
    InstanceIds:
    - "{{getInstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      commands: 
        - |
           sudo yum update -y
- name: "InstallNginx"
  action: "aws:runCommand"
  inputs:
    DocumentName: "AWS-RunShellScript"
    InstanceIds:
    - "{{getInstanceId.InstanceId}}"
    CloudWatchOutputConfig:
      CloudWatchOutputEnabled: "true"
    Parameters:
      commands: 
        - |
           sudo amazon-linux-extras install nginx1 -y